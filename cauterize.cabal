name:                cauterize
version:             0.1.0.0
synopsis:            Cauterize core library and tools.
-- description:         
license:             BSD3
license-file:        LICENSE
author:              John Van Enk
maintainer:          vanenkj@gmail.com
-- copyright:           
category:            Data
build-type:          Simple
-- extra-source-files:  
cabal-version:       >=1.10

library
  hs-source-dirs:      src
  ghc-options:         -Wall -O2
  build-depends:       base < 5,
                       mtl >=2.2,
                       parsec,
                       cryptohash,
                       QuickCheck,
                       containers,
                       bytestring,
                       wl-pprint-text,
                       text >= 1.2,
                       cereal >= 0.4.1.1,
                       GraphSCC
  default-language:    Haskell2010
  exposed-modules:     Cauterize.Common.Types,
                       Cauterize.Schema.Types,
                       Cauterize.Specification.Types,
                       Cauterize.Schema,
                       Cauterize.Schema.Parser,
                       Cauterize.Specification.Parser
                       Cauterize.Specification,
                       Cauterize.FormHash,
                       Cauterize.Dynamic,
                       Cauterize.Dynamic.Common,
                       Cauterize.Dynamic.Types,
                       Cauterize.Dynamic.Pack,
                       Cauterize.Dynamic.Unpack,
                       Cauterize.Dynamic.Gen,
                       Cauterize.Dynamic.Pretty,
                       Cauterize.Dynamic.Meta,
                       Cauterize.Dynamic.Meta.Gen,
                       Cauterize.Dynamic.Meta.Pack,
                       Cauterize.Dynamic.Meta.Unpack,
                       Cauterize.Dynamic.Meta.Types,
                       Cauterize.Dynamic.Meta.Pretty,
                       Cauterize.Common.ParserUtils,
                       Cauterize.Generate

-- `cauterize` is the main entry point into the compiler/converter. This turns
-- schemas into specifications.
executable cauterize
  hs-source-dirs:      cauterize-cmd
  ghc-options:         -Wall -O2 -threaded
  main-is:             Main.hs
  build-depends:       base,
                       cauterize,
                       text >= 1.2,
                       optparse-applicative >=0.11.0.1
  default-language:    Haskell2010

test-suite spec
  type:                exitcode-stdio-1.0
  hs-source-dirs:      tests
  ghc-options:         -Wall -O2 -threaded
  main-is:             Spec.hs
  other-modules:       TestSupport,
                       Cauterize.Dynamic.MetaSpec,
                       Cauterize.DynamicSpec,
                       Cauterize.SchemaSpec
  build-depends:       base,
                       bytestring,
                       containers,
                       hspec >= 2.1.4,
                       hspec-discover >= 2.1.4,
                       text >= 1.2,
                       wl-pprint-text,
                       cauterize
  default-language:    Haskell2010
