name:                cauterize
version:             0.1.0.0
synopsis:            Cauterize core library and tools.
-- description:         
license:             BSD3
license-file:        LICENSE
author:              John Van Enk
maintainer:          vanenkj@gmail.com
-- copyright:           
category:            Data
build-type:          Simple
-- extra-source-files:  
cabal-version:       >=1.10

library
  hs-source-dirs:      src
  ghc-options:         -Wall -O2
  build-depends:       base >=4.6 && <4.8,
                       mtl >=2.2,
                       parsec,
                       pretty,
                       pretty-class == 0.1.*,
                       cryptohash,
                       QuickCheck,
                       containers,
                       bytestring,
                       wl-pprint-text,
                       text,
                       GraphSCC
  default-language:    Haskell2010
  exposed-modules:     Cauterize.Common.Types,
                       Cauterize.Schema.Types,
                       Cauterize.Specification.Types,
                       Cauterize.Schema,
                       Cauterize.Schema.Parser,
                       Cauterize.Specification.Parser
                       Cauterize.Specification,
                       Cauterize.Schema.Arbitrary,
                       Cauterize.FormHash,
                       Cauterize.Common.ParserUtils,
                       Cauterize.Meta,
                       Cauterize.Meta.Parser,
                       Cauterize.Meta.Pretty,
                       Cauterize.Meta.Types

-- `cauterize` is the main entry point into the compiler/converter. This turns
-- schemas into specifications.
executable cauterize
  hs-source-dirs:      cauterize-cmd
  ghc-options:         -Wall -O2
  main-is:             Main.hs
  build-depends:       base >=4.6 && <4.8,
                       cauterize,
                       optparse-applicative >=0.11.0.1
  default-language:    Haskell2010

-- `cauterize-test` is a tool to generate arbitrary testing data. At the
-- moment, it only produces schemas or specifications with a specified number
-- of types.
executable cauterize-test
  hs-source-dirs:      cauterize-test
  ghc-options:         -Wall -O2
  main-is:             Main.hs
  build-depends:       base >=4.6 && <4.8,
                       cauterize,
                       optparse-applicative >=0.11.0.1,
                       containers,
                       QuickCheck >=2.7,
                       pretty,
                       pretty-class >= 0.1,
                       text,
                       time,
                       directory
  default-language:    Haskell2010

executable cauterize-meta
  hs-source-dirs:      cauterize-meta
  ghc-options:         -Wall -O2
  main-is:             Main.hs
  build-depends:       base >=4.7 && <4.8,
                       cauterize,
                       optparse-applicative >=0.11.0.1
  default-language:    Haskell2010
